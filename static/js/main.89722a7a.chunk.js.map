{"version":3,"sources":["Assets/Images/computer.png","Assets/Images/glitch.gif","Components/Noise.js","Components/Player.js","Components/Computer.js","Components/Disclaimer.js","Components/Datagrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Noise","react_default","a","createElement","className","Player","props","title","src","frameBorder","allowtransparency","allow","Computer","state","glitchy","componentDidMount","_this","updateGlitchyPlease","setTimeout","this","setState","bind","Object","assertThisInitialized","renderComputerScreen","Glitch","alt","Components_Player","ComputerSrc","React","Component","Disclaimer","text","Datagrid","App","Fragment","Components_Noise","Components_Computer","Components_Disclaimer","Components_Datagrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2RCSzBC,MANf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DCUJC,MAbf,SAAgBC,GACd,OACEL,EAAAC,EAAAC,cAAA,UACEI,MAAM,SACNC,IAAKF,EAAME,IACXJ,UAAWE,EAAMF,UACjBK,YAAY,IACZC,kBAAkB,OAClBC,MAAM,qBC8CGC,6MAjDbC,MAAQ,CACNC,SAAS,KAGXC,kBAAoB,WAClBC,EAAKC,yBAGPA,oBAAsB,WACpBC,WACE,WACEC,KAAKC,SAAS,CACZN,SAAS,KAEXO,KAJFC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAN,KAKA,SAIJQ,qBAAuB,WACrB,OAA2B,IAAvBR,EAAKH,MAAMC,QAEXb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBI,IAAKiB,IAAQC,IAAI,yBAGpD,2EAKF,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZe,KAAKK,uBACNvB,EAAAC,EAAAC,cAACwB,EAAD,CACEvB,UAAU,SACVI,IAAI,+FAGRP,EAAAC,EAAAC,cAAA,OACEK,IAAKoB,IACLF,IAAI,WACJtB,UAAU,qCA3CGyB,IAAMC,iBCKdC,MARf,SAAoBzB,GAClB,OACEL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACVE,EAAM0B,aCGEC,MANf,WACE,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cCqBJ8B,mLAjBX,OACEjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kCAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oDAAd,mCAGAH,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAAYN,KAAK,oEAEnB/B,EAAAC,EAAAC,cAACoC,EAAD,cAbUV,IAAMC,WCKJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.89722a7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/computer.3fe42c3e.png\";","module.exports = __webpack_public_path__ + \"static/media/glitch.f801a362.gif\";","import React from 'react';\nimport \"../Assets/Styles/Noise.scss\";\n\nfunction Noise() {\n  return(\n    <div className=\"Noise\" />\n  )\n}\n\nexport default Noise;","import React from \"react\";\n\nfunction Player(props) {\n  return (\n    <iframe\n      title=\"Player\"\n      src={props.src}\n      className={props.className}\n      frameBorder=\"0\"\n      allowtransparency=\"true\"\n      allow=\"encrypted-media\"\n    />\n  );\n}\n\nexport default Player;\n","import React from \"react\";\nimport \"../Assets/Styles/Computer.scss\";\nimport ComputerSrc from \"../Assets/Images/computer.png\";\nimport Glitch from \"../Assets/Images/glitch.gif\";\nimport Player from \"./Player\";\n\nclass Computer extends React.Component {\n  state = {\n    glitchy: true\n  };\n\n  componentDidMount = () => {\n    this.updateGlitchyPlease();\n  };\n\n  updateGlitchyPlease = () => {\n    setTimeout(\n      function() {\n        this.setState({\n          glitchy: false\n        });\n      }.bind(this),\n      4500\n    );\n  };\n\n  renderComputerScreen = () => {\n    if (this.state.glitchy === true) {\n      return (\n        <img className=\"Computer-glitch\" src={Glitch} alt=\"Computer glitch\" />\n      );\n    } else {\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Computer\">\n        <div className=\"Computer-screen\">\n          {this.renderComputerScreen()}\n          <Player\n            className=\"Player\"\n            src=\"https://open.spotify.com/embed/user/vict%25C3%25B8r/playlist/5vvVvlGahx4z1nGE1ZNBV3∏\"\n          />\n        </div>\n        <img\n          src={ComputerSrc}\n          alt=\"Computer\"\n          className=\"Computer-image marginTmd\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Computer;\n","import React from 'react';\nimport \"../Assets/Styles/Disclaimer.scss\";\n\nfunction Disclaimer(props) {\n  return (\n    <p className=\"Disclaimer\">\n      {props.text}\n    </p>\n  );\n}\n\nexport default Disclaimer;","import React from 'react';\nimport \"../Assets/Styles/Datagrid.scss\";\n\nfunction Datagrid() {\n  return (\n    <div className=\"Datagrid\" />\n  );\n}\n\nexport default Datagrid;","import React from \"react\";\nimport \"./Assets/Styles/App.scss\";\nimport Noise from \"./Components/Noise\";\nimport Computer from \"./Components/Computer\";\nimport Disclaimer from \"./Components/Disclaimer\";\nimport Datagrid from \"./Components/Datagrid\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Noise />\n        <div className=\"App\">\n          <h1 className=\"Heading Heading--h1 textShadow\">LASER RACER</h1>\n          <h2 className=\"Heading Heading--h2 Heading--altColor textShadow\">\n            79 MINUTES OF HI-FI 80'S TRACKS\n          </h2>\n          <Computer />\n          <Disclaimer text=\"Responsive design? There were no smartphones back in the 80's!\" />\n        </div>\n        <Datagrid />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}